The following classes are defined in namespace protocol.

protocol::MessageLengthInterface is a base class for Sink, which in turn
is a base class for protocol::Decoder which implements the protocol.

The reason for the splitting into three different classes is internal;
the user only has to do with Decoder.

The following virtual functions need to be defined:

* size_t minimum_block_size()

  protocol::MessageLength has a good default, that implements this
  in terms of its virtual funtion minimum_block_size_estimate(),
  which in turn is implemented in terms of average_message_length().
  MessageLength::average_message_length() returns 512 bytes, which
  is a good default, but derived protocol classes might want to
  override that function.

* size_t end_of_msg_finder(char const* new_data, size_t rlen)

  Returns the size of the shortest decodable chunk (aka, the first
  message (including end of msg sequence, if any)), or 0 if there
  is no complete message.
  This method should only be called by InputDevice::data_received()
  or classes that override that.

  For convenience, protocol::Decoder defines a default that searches
  for the first carriage return character ('\n').

* void decode(int& allow_deletion_count, MsgBlock&& msg)

  This function must decode the message in `msg`, which will
  be contiguous. On failure, or when the end of input is reached,
  it should call close_input_device(allow_deletion_count).

  Decoder::decode is pure virtual because it makes no sense
  to provide a default: close_input_device really should always
  be called and it is not possible to define a sensible default
  for when that should happen.


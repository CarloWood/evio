add_library( evio_protocol_ObjLib OBJECT )

#==============================================================================
# Building external project matrixssl.
#

include( ExternalProject )
include( ProcessorCount )

# Determine the number of cores we have, for parallel building of matrixssl.
ProcessorCount( N )
if ( NOT N EQUAL 0 )
  set( MAKE_OPTIONS "-j${N}" )
else ()
  set( MAKE_OPTIONS "" )
endif ()

# Path to the build directory of MatrixSSL, relative to ${CMAKE_CURRENT_BINARY_DIR}.
set( MatrixSSL_rel_builddir "matrixssl/src/MatrixSSL-build" )
# The absolute path to the build directory of MatrixSSL.
set( MatrixSSL_builddir "${CMAKE_CURRENT_BINARY_DIR}/${MatrixSSL_rel_builddir}" )
# The absolute path to the source directory of MatrixSSL.
set( MatrixSSL_srcdir "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl" )
# The libraries we link with (must be in this order).
# According to https://www.gnu.org/software/libtool/manual/libtool.html#Creating-object-files libraries in .libs are always PIC.
set( MatrixSSL_static_libraries
    "${MatrixSSL_builddir}/matrixssl/.libs/libssl_s.a"
    "${MatrixSSL_builddir}/crypto/.libs/libcrypt_s.a"
    "${MatrixSSL_builddir}/core/.libs/libcore_s.a"
)

file( STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl-bootstrap-files" MatrixSSL_bootstrap_files ENCODING UTF-8 )
list( TRANSFORM MatrixSSL_bootstrap_files PREPEND "${MatrixSSL_srcdir}/" )

# Fill MatrixSSL_configure_files with a list of files that are generated by the CONFIGURE_COMMAND.
# Unfortunately we can only create this list after matrixssl has already been built, so this list
# will only be correct if we run cmake a second time after having built the project.
if ( EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl-configure-files" )
  file( STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl-configure-files" MatrixSSL_configure_files ENCODING UTF-8 )
else ()
  # If the list wasn't generated yet, use this minimal list (all generated makefiles).
  set( MatrixSSL_configure_files
      makefile
      matrixssl/GNUmakefile matrixssl/makefile
      crypto/GNUmakefile crypto/makefile
      core/makefile
      apps/makefile
      apps/common/GNUmakefile apps/common/makefile
      apps/dtls/GNUmakefile apps/dtls/makefile
      apps/ssl/GNUmakefile apps/ssl/makefile
  )
endif ()
list( TRANSFORM MatrixSSL_configure_files PREPEND "${MatrixSSL_rel_builddir}/" )

# Fill MatrixSSL_build_files with a list of files that are generated by the BUILD_COMMAND.
# Same remark as above.
if ( EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl-build-files" )
  file( STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl-build-files" MatrixSSL_build_files ENCODING UTF-8 )
  list( TRANSFORM MatrixSSL_build_files PREPEND "${MatrixSSL_rel_builddir}/" )
else ()
  # If the list wasn't generated yet, use this minimal list (these are the files we actually use).
  set( MatrixSSL_build_files "${MatrixSSL_static_libraries}" )
endif ()

set( CONFIGURE_OPTIONS "--enable-silent-rules" )
set( BUILD_OPTIONS "CCARCH=${CMAKE_CXX_LIBRARY_ARCHITECTURE}" )

ExternalProject_Add( MatrixSSL
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/matrixssl"
  BINARY_DIR "${MatrixSSL_builddir}"
  PREFIX "${CMAKE_CURRENT_BINARY_DIR}/matrixssl"
  CONFIGURE_COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/configure_matrixssl.sh" "${CONFIGURE_OPTIONS}" "${CMAKE_MAKE_PROGRAM}" ${MAKE_OPTIONS}
  BUILD_COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/build_matrixssl.sh" "${CMAKE_MAKE_PROGRAM}" ${BUILD_OPTIONS} -s ${MAKE_OPTIONS}
  BUILD_ALWAYS OFF # Turn ON when while working on matrixssl files.
  BUILD_BYPRODUCTS "${MatrixSSL_build_files}"
  STEP_TARGETS build
  INSTALL_COMMAND ""
  EXCLUDE_FROM_ALL TRUE
)

ExternalProject_Get_property( MatrixSSL SOURCE_DIR )
ExternalProject_Get_property( MatrixSSL BINARY_DIR )

ExternalProject_Add_Step( MatrixSSL bootstrap
  DEPENDEES download
  DEPENDERS configure
  WORKING_DIRECTORY "${SOURCE_DIR}"
  COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/bootstrap_matrixssl.sh"
)

ExternalProject_Add_StepDependencies( MatrixSSL configure
    "${CMAKE_CURRENT_SOURCE_DIR}/configure_matrixssl.sh"
    "${SOURCE_DIR}/configure.ac"
    "${SOURCE_DIR}/makefile.am"
    "${SOURCE_DIR}/apps/common/makefile.am"
    "${SOURCE_DIR}/apps/dtls/makefile.am"
    "${SOURCE_DIR}/apps/ssl/makefile.am"
    "${SOURCE_DIR}/apps/makefile.am"
    "${SOURCE_DIR}/core/makefile.am"
    "${SOURCE_DIR}/crypto/makefile.am"
    "${SOURCE_DIR}/matrixssl/makefile.am"
)

# Maintainer-clean rule for the above.
add_custom_target( maintainer-clean-evio
  COMMAND /bin/rm -f "${MatrixSSL_bootstrap_files}"
  COMMAND /bin/rm -f "${MatrixSSL_configure_files}"
  COMMAND_EXPAND_LISTS
)

#==============================================================================
# Create an interface library for matrixssl
#

add_library( evio_matrixssl_IfLib INTERFACE IMPORTED )
add_dependencies( evio_matrixssl_IfLib MatrixSSL-build )

set_property( TARGET evio_matrixssl_IfLib PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON )
target_link_libraries( evio_matrixssl_IfLib
    INTERFACE
        "${MatrixSSL_static_libraries}"
)
target_include_directories( evio_matrixssl_IfLib
    INTERFACE
        "${BINARY_DIR}"
        "${SOURCE_DIR}"
        "${SOURCE_DIR}/core/include"
        "${SOURCE_DIR}/core/osdep/include"
)
target_compile_options( evio_matrixssl_IfLib
    INTERFACE
        "-maes"
)
target_compile_definitions( evio_matrixssl_IfLib
    INTERFACE
        "MATRIX_CONFIGURATION_INCDIR_FIRST"
)

#==============================================================================
# BUILD PROJECT
#

# The list of source files.
target_sources( evio_protocol_ObjLib
    PRIVATE
        "TLS.cxx"

        "TLS.h"
)

# Required include search-paths.
get_target_property( CWDS_INTERFACE_INCLUDE_DIRECTORIES AICxx::cwds INTERFACE_INCLUDE_DIRECTORIES )
target_include_directories( evio_protocol_ObjLib
    PUBLIC
        "${CWDS_INTERFACE_INCLUDE_DIRECTORIES}" # For sys.h and debug.h.
)

# Require support for C++17.
target_compile_features( evio_protocol_ObjLib
    PUBLIC cxx_std_17
)

target_link_libraries( evio_protocol_ObjLib
    PUBLIC
        evio_matrixssl_IfLib
        AICxx::utils
)

# Create an ALIAS target.
add_library( AICxx::evio_protocol ALIAS evio_protocol_ObjLib )

# Prepend this object library to list.
set( AICXX_OBJECTS_LIST AICxx::evio_protocol ${AICXX_OBJECTS_LIST} CACHE INTERNAL "List of OBJECT libaries that this project uses." )
